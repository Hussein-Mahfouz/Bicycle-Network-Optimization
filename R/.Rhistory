View(msoa_centroids)
View(msoa_centroids_x)
hist(d$dist)
tezt <- dodgr_dists(graph_contracted, from = msoa_centroids, to = msoa_centroids) %>% as.data.frame()
View(tezt)
#tezt <- dodgr_dists(graph_contracted, from = msoa_centroids, to = msoa_centroids) %>% as.data.frame()
colnames(tezt) <- msoa_centroids_x$MSOA11CD
tezt <- cbind(msoa_centroids_x$MSOA11CD, tezt) %>% rename(from = `msoa_centroids_x$MSOA11CD`)
View(msoa_centroids)
View(msoa_centroids_x)
# save the output for routing later. Remove borders and set centroids as geometry, then save
# this does not overwrite 'spatial_london' sf
msoa_centroids_x <- st_drop_geometry(spatial_london) %>% st_set_geometry('centroid')
View(msoa_centroids_x)
View(spatial_london)
View(graph_contracted)
View(d)
View(flows_london)
View(spatial_london)
# add geometry of destination
flows_london <- flows_london %>% left_join(spatial_london[ , c("MSOA11CD", "geometry", "centroid")],
by = c("Area of workplace" = "MSOA11CD")) %>%
rename(geom_dest = geometry, cent_dest = centroid)
sf_dist <- read_csv("../data/msoa_distances.csv")
View(sf_dist)
sf_dist <- read_csv("../data/msoa_distances.csv") %>% subset(select = c(`Area of residence`, `Area of workplace`, dist))
sf_dist <- read_csv("../data/msoa_distances.csv") %>%
subset(select = c(`Area of residence`, `Area of workplace`, dist)) %>%
rename(dist_sf = dist)
whatever <- left_join(d, sf, by = c("from" = "Area of Residence", "to" = "Area of Workplace"))
whatever <- left_join(d, dist_sf, by = c("from" = "Area of Residence", "to" = "Area of Workplace"))
whatever <- left_join(d, sf_dist, by = c("from" = "Area of Residence", "to" = "Area of Workplace"))
whatever <- left_join(d, sf_dist, by = c("from" = "Area of residence", "to" = "Area of workplace"))
View(whatever)
View(d)
View(flow)
View(sf_dist)
View(flows_london)
View(flows)
View(msoas_london)
flows_london2 <- left_join(flows_london, d, by = c("Area of residence" = "from" , "Area of workplace" = "to"))
View(flows_london2)
View(flows_london2)
View(msoas_london)
View(msoa_centroids_x)
View(sf_dist)
rm(whatever, tezt)
rm(flows_london2)
rm(dddd)
rm(ddd)
rm(dx)
rm(flows)
rm(flows_internal())
rm(flows_internal)
rm(flows_london)
rm(city_names)
rm(msoa_boundaries)
rm(msoa_centroids)
rm(msoa_centroids_x)
rm(msoas_london)
rm(spatial_london)
View(dd)
View(d)
rm(dd)
rm(d)
View(flow)
rm(flow)
rm(sf_dist)
rm(msoas_city())
rm(msoas_city)
rm(split_lon_lat)
# this is a lookup table matching MSOAs to major towns and cities
city_names <- read_csv('../data-raw/Middle_Layer_Super_Output_Area__2011__to_Major_Towns_and_Cities__December_2015__Lookup_in_England_and_Wales.csv')
# change column name
city_names <- city_names %>% rename(city = TCITY15NM)
# flow data from the 2011 census https://www.nomisweb.co.uk/census/2011/bulk/rOD1
flows <- read_csv('../data-raw/flow_data.csv')
# add a column with the city name corresponding to each Residence MSOA
flows <- flows %>% left_join(city_names[,c("MSOA11CD", "city")],
by = c("Area of residence" = "MSOA11CD")) %>%
rename(city_origin = city) # rename column so that we know it is referring to the 'Area of residence'
# add a column with the city name corresponding to each Workplace MSOA
flows <- flows %>% left_join(city_names[,c("MSOA11CD", "city")],
by = c("Area of workplace" = "MSOA11CD")) %>%
rename(city_dest = city) # rename column so that we know it is referring to the 'Area of workplace'
View(flows)
flows_internal <- function(name) {
x <- flows %>% filter(city_origin == name, city_dest == name)
return(x)
}
# use function to get flows between all MSOAs in London
flows_london <- flows_internal("London")
# save as csv to use in next step
write_csv(flows_london, path = "../data/flows_london.csv")
View(flows_london)
# remove variables from global environment
rm(flows, flows_london)
#import spatial data using API: https://geoportal.statistics.gov.uk/datasets/826dc85fb600440889480f4d9dbb1a24_0
#msoa_boundaries <- st_read('https://opendata.arcgis.com/datasets/826dc85fb600440889480f4d9dbb1a24_0.geojson')
# or download it locally and read it (faster)
msoa_boundaries <- st_read('../data-raw/MSOA_2011_Boundaries/Middle_Layer_Super_Output_Areas__December_2011__Boundaries.shp') %>%
st_transform(4326)   # transform to EPSG 4326 for dodgr routing later
View(city_names)
# function to filter MSOAs that are within a certain city
msoas_city <- function(name) {
x <- city_names %>% filter(city == name)
return(x)
}
# get msoas in London
msoas_london <- msoas_city("London")
# Add spatial data to london msoas
spatial_london <-
msoas_london[, c("MSOA11CD", "MSOA11NM")] %>%
left_join(msoa_boundaries[ , c("msoa11cd", "geometry")], by = c("MSOA11CD" = "msoa11cd")) %>%
st_as_sf() %>% lwgeom::st_make_valid() %>%
mutate(centroid = st_centroid(geometry))  # we will need centroids to calculate distance matrix
View(spatial_london)
# Remove border geometry and set centroids as geometry. This does not overwrite 'spatial_london' sf
msoa_centroids <-
st_drop_geometry(spatial_london) %>%
st_set_geometry('centroid')
View(msoa_centroids)
# function to split c(lat, lon) to two seperate columns  FROM JM London (https://github.com/r-spatial/sf/issues/231)
# lat = Y lon = X
split_lon_lat <- function(x, names = c("lon","lat")) {
stopifnot(inherits(x,"sf") && inherits(sf::st_geometry(x),"sfc_POINT"))
ret <- sf::st_coordinates(x)
ret <- tibble::as_tibble(ret)
stopifnot(length(names) == ncol(ret))
x <- x[ , !names(x) %in% names]
ret <- setNames(ret,names)
dplyr::bind_cols(x,ret)
}
View(msoa_centroids)
# add lon and lat columns to dataframe using sfc_as_cols function
msoa_lon_lat <- msoa_centroids %>% split_lon_lat() %>% st_drop_geometry() %>%
select(c(lon, lat))
View(msoa_centroids)
View(msoa_lon_lat)
#save the data so that you don't have to do this again
readr::write_csv(graph, path = "../data/weighted_graph.csv")
x <- read_csv('../data/weighted_graph.csv')
# contract graph for faster routing
graph_contracted2 <- dodgr_contract_graph(x)
identical(graph_contracted, graph_contracted2)
class(graph_contracted)
class(graph_contracted2)
d2 <- dodgr_dists(graph_contracted2, from = msoa_lon_lat, to = msoa_lon_lat) %>% as.data.frame()
View(d2)
# get distance matrix
d <- dodgr_dists(graph_contracted, from = msoa_lon_lat, to = msoa_lon_lat) %>% as.data.frame()
identical(d, d2)
d == d2
rm(d2)
rm(graph_contracted2)
View(d)
rm(d)
# get distance matrix
dist_mat <- dodgr_dists(graph_contracted, from = msoa_lon_lat, to = msoa_lon_lat) %>% as.data.frame()
View(dist_mat)
View(dist_mat)
# Change column names for pivoting
colnames(dist_mat) <- msoa_centroids$MSOA11CD
View(msoa_centroids)
# column bind to add MSOA IDs to df. If this is done using rownames then then it is added as a column index (cannot pivot)
dist_mat <- cbind(msoa_centroids$MSOA11CD, dist_mat) %>% rename(from = `msoa_centroids$MSOA11CD`)
# Change to long format to merge with flows
dist_mat <- dist_mat %>%
pivot_longer(-from, names_to = "to", values_to = "dist")
View(dist_mat)
flows_london <- read_csv("../data/flows_london.csv")
View(flows_london)
flows_london <- read_csv("../data/flows_london.csv") %>%
subset(select = -c(city_origin, city_dest))
# add geometry of origin
flows_london <- flows_london %>% left_join(spatial_london[ , c("MSOA11CD", "geometry", "centroid")],
by = c("Area of residence" = "MSOA11CD")) %>%
rename(geom_orig = geometry, cent_orig = centroid)
View(flows_london)
# add geometry of destination
flows_london <- flows_london %>% left_join(spatial_london[ , c("MSOA11CD", "geometry", "centroid")],
by = c("Area of workplace" = "MSOA11CD")) %>%
rename(geom_dest = geometry, cent_dest = centroid)
# get straight line distances - this takes TIMMEEEE
flows_london <- flows_london %>%
mutate(dist =st_distance(cent_orig, cent_dest, by_element = T))
View(flows_london)
# Create dataframe with both straight line distances and dodgr distance
distances <- flows_london %>%
subset(select = -c(geom_orig, geom_dest, cent_orig, cent_dest)) %>%
subset(select = c(`Area of residence`, `Area of workplace`, dist)) %>%
rename(dist_strait = dist) %>%
left_join(dist_mat, by = c("Area of residence" = "from", "Area of workplace" = "to"))
View(distances)
distances <- flows_london %>%
subset(select = -c(geom_orig, geom_dest, cent_orig, cent_dest)) %>%
subset(select = c(`Area of residence`, `Area of workplace`, dist)) %>%
rename(dist_strait = dist) %>%
right_join(dist_mat, by = c("from" = "Area of residence", "to" = "Area of workplace"))
distances2 <- flows_london %>%
subset(select = -c(geom_orig, geom_dest, cent_orig, cent_dest)) %>%
subset(select = c(`Area of residence`, `Area of workplace`, dist)) %>%
rename(dist_strait = dist) %>%
right_join(dist_mat, by = c("Area of residence" = "from" , "Area of workplace" = "to"))
View(distances2)
rm(distances2)
# Create dataframe with both straight line distances and dodgr distance
distances <- flows_london %>%
subset(select = -c(geom_orig, geom_dest, cent_orig, cent_dest)) %>%
subset(select = c(`Area of residence`, `Area of workplace`, dist)) %>%
rename(dist_straight = dist) %>%
left_join(dist_mat, by = c("Area of residence" = "from", "Area of workplace" = "to"))
View(distances)
# Create dataframe with both straight line distances and dodgr distance
distances <- flows_london %>%
subset(select = -c(geom_orig, geom_dest, cent_orig, cent_dest)) %>%
subset(select = c(`Area of residence`, `Area of workplace`, dist)) %>%
rename(dist_straight = dist) %>%
left_join(dist_mat, by = c("Area of residence" = "from", "Area of workplace" = "to")) %>%
rename(dist_dodgr = dist) %>%
distances2 <- flows_london %>%
subset(select = -c(geom_orig, geom_dest, cent_orig, cent_dest)) %>%
subset(select = c(`Area of residence`, `Area of workplace`, dist)) %>%
rename(dist_strait = dist) %>%
right_join(dist_mat, by = c("Area of residence" = "from" , "Area of workplace" = "to"))
# Create dataframe with both straight line distances and dodgr distance
distances <- flows_london %>%
subset(select = -c(geom_orig, geom_dest, cent_orig, cent_dest)) %>%
subset(select = c(`Area of residence`, `Area of workplace`, dist)) %>%
rename(dist_straight = dist) %>%
left_join(dist_mat, by = c("Area of residence" = "from", "Area of workplace" = "to")) %>%
rename(dist_dodgr = dist)
View(distances)
# save for reference
write_csv(distances, path = "../data/dist_straight_vs_dodgr.csv")
View(dist_mat)
# left join with flows df. Flows df has less rows because it is a sparce matrix (not all OD pairs have flows)
x <- flows_london %>% subset(select = -c(geom_orig, cent_orig, geom_dest, cent_dest)) %>%
left_join(dist_mat, by = c("Area of residence" = "from" , "Area of workplace" = "to")) #%>%
View(x)
# left join with flows df. Flows df has less rows because it is a sparce matrix (not all OD pairs have flows)
x <- flows_london %>% subset(select = -c(geom_orig, cent_orig, geom_dest, cent_dest, dist)) %>%
left_join(dist_mat, by = c("Area of residence" = "from" , "Area of workplace" = "to")) #%>%
View(x)
# left join with flows df. Flows df has less rows because it is a sparce matrix (not all OD pairs have flows)
flows_london %>% subset(select = -c(geom_orig, cent_orig, geom_dest, cent_dest, dist)) %>%
left_join(dist_mat, by = c("Area of residence" = "from" , "Area of workplace" = "to")) %>%
write_csv(path = "../data/flows_dist_for_potential_flow.csv")
x <- read_csv("../data/flows_dist_for_potential_flow.csv")
View(x)
rm(x)
View(dist_mat)
View(distances)
View(msoa_boundaries)
View(msoa_centroids)
View(msoa_lon_lat)
View(msoa_centroids)
View(spatial_london)
View(msoa_centroids)
# remove variables from global environment
rm(city_names, dist_mat, distances, msoa_boundaries, spatial_london)
View(msoas_london)
rm(msoas_london)
library(geofabrik)
install.packages('geofabrik')
library(geofabrik)
devtools::install_github("ITSLeeds/geofabrik")
devtools::install_github("ITSLeeds/geofabrik")
library(geofabrik)
iow_gf_region = gf_find("isle wight")
plot(iow_gf_region)
View(iow_gf_region)
class(iow_gf_region)
iow_gf_region = gf_find("isle wight") %>% sf::st_make_valid()
library(sf)
plot(iow_gf_region)
iow_gf_region = gf_find("isle wight") %>% sf::st_make_valid()
library(lwgeom)
iow_gf_region = gf_find("isle wight") %>% lwgeom::st_make_valid()
plot(iow_gf_region)
plot(st_geometry(iow_gf_region))
london_gf_region = gf_find("london") %>% lwgeom::st_make_valid()
plot(st_geometry(iow_gf_region))
plot(st_geometry(london_gf_region))
london_gf_region = gf_find("london uk") %>% lwgeom::st_make_valid()
london_gf_region = gf_find("london england") %>% lwgeom::st_make_valid()
london_gf_region = gf_find("greater london") %>% lwgeom::st_make_valid()
plot(st_geometry(london_gf_region))
# read in the data
flow <- readr::read_csv("../data/msoa_distances.csv")
# read in the data
flow <- readr::read_csv("../data/flows_london.csv")
View(flow)
# create a copy of the df
demand_decay <- flow
# get % increase in cycling as distance decay
demand_decay$uptake_dutch = pct::uptake_pct_godutch(distance = demand_decay$dist, gradient = 0)
# read in the data
flow <- readr::read_csv("../data/flows_dist_for_potential_flow.csv")
# create a copy of the df
demand_decay <- flow
# get % increase in cycling as distance decay
demand_decay$uptake_dutch = pct::uptake_pct_godutch(distance = demand_decay$dist, gradient = 0)
View(demand_decay)
# get potential demand: non-active flow*uptake + active flow
demand_decay <- demand_decay %>%
# get current active travel
mutate(active_travel = Bicycle + `On foot`) %>%
# get potential active travel: non-active modes * distance decay parameter
mutate(potential_demand = round((`All categories: Method of travel to work` - active_travel) * uptake_dutch) +
active_travel)
library(tidyverse)
# get potential demand: non-active flow*uptake + active flow
demand_decay <- demand_decay %>%
# get current active travel
mutate(active_travel = Bicycle + `On foot`) %>%
# get potential active travel: non-active modes * distance decay parameter
mutate(potential_demand = round((`All categories: Method of travel to work` - active_travel) * uptake_dutch) +
active_travel)
View(demand_decay)
# save csv to use in '4_aggregating_flows'
demand_decay %>%
subset(select = c(`Area of residence`, `Area of workplace`, `potential_demand`)) %>%
write_csv(path = "../data/flows_for_aggregated_routing.csv")
x <- read_csv('../data/flows_for_aggregated_routing.csv')
View(x)
View(x)
?pivot_wider
View(x)
x2 <- x %>% pivot_wider(id_cols = `Area of residence`)
x2 <- x %>% pivot_wider(id_cols = `Area of workplace`, values_from = `potential_demand`)
ncol(x)
View(x)
x
x %>% pivot_wider(names_from =  = `Area of workplace`, values_from = potential_demand)
x %>% pivot_wider(names_from = `Area of workplace`, values_from = potential_demand)
x2 <- x %>% pivot_wider(names_from = `Area of workplace`, values_from = potential_demand)
View(x2)
View(x)
#import spatial data using API: https://geoportal.statistics.gov.uk/datasets/826dc85fb600440889480f4d9dbb1a24_0
#msoa_boundaries <- st_read('https://opendata.arcgis.com/datasets/826dc85fb600440889480f4d9dbb1a24_0.geojson')
# or download it locally and read it (faster)
msoa_boundaries <- st_read('../data-raw/MSOA_2011_Boundaries/Middle_Layer_Super_Output_Areas__December_2011__Boundaries.shp') %>%
st_transform(4326)   # transform to EPSG 4326 for dodgr routing later
# function to filter MSOAs that are within a certain city
msoas_city <- function(name) {
x <- city_names %>% filter(city == name)
return(x)
}
# get msoas in London
msoas_london <- msoas_city("London")
# this is a lookup table matching MSOAs to major towns and cities
city_names <- read_csv('../data-raw/Middle_Layer_Super_Output_Area__2011__to_Major_Towns_and_Cities__December_2015__Lookup_in_England_and_Wales.csv')
# change column name
city_names <- city_names %>% rename(city = TCITY15NM)
# get msoas in London
msoas_london <- msoas_city("London")
# Add spatial data to london msoas
spatial_london <-
msoas_london[, c("MSOA11CD", "MSOA11NM")] %>%
left_join(msoa_boundaries[ , c("msoa11cd", "geometry")], by = c("MSOA11CD" = "msoa11cd")) %>%
st_as_sf() %>% lwgeom::st_make_valid() %>%
mutate(centroid = st_centroid(geometry))  # we will need centroids to calculate distance matrix
# Remove border geometry and set centroids as geometry. This does not overwrite 'spatial_london' sf
msoa_centroids <-
st_drop_geometry(spatial_london) %>%
st_set_geometry('centroid')
# function to split c(lat, lon) to two seperate columns  FROM JM London (https://github.com/r-spatial/sf/issues/231)
# lat = Y lon = X
split_lon_lat <- function(x, names = c("lon","lat")) {
stopifnot(inherits(x,"sf") && inherits(sf::st_geometry(x),"sfc_POINT"))
ret <- sf::st_coordinates(x)
ret <- tibble::as_tibble(ret)
stopifnot(length(names) == ncol(ret))
x <- x[ , !names(x) %in% names]
ret <- setNames(ret,names)
dplyr::bind_cols(x,ret)
}
# add lon and lat columns to dataframe using sfc_as_cols function
msoa_lon_lat <- msoa_centroids %>% split_lon_lat() %>% st_drop_geometry() %>%
select(c(lon, lat))
View(msoa_lon_lat)
View(msoa_centroids)
xxx <- msoa_centroids %>% split_lon_lat() %>% st_drop_geometry()
View(xxx)
msoa_centroids %>% split_lon_lat() %>% st_drop_geometry() %>%
select(-c(MSOA11NM))
# save this version for routing in `4_aggregating_flows`
msoa_centroids %>% split_lon_lat() %>% st_drop_geometry() %>%
select(-c(MSOA11NM)) %>% write_csv(path = "../data/msoa_lon_lat.csv")
rm(xxx)
lon_lat <- read_csv('../data/msoa_lon_lat.csv')
View(lon_lat)
graph <- weight_streetnet (hampi)
library(dodgr)
graph <- weight_streetnet (hampi)
from <- sample (graph$from_id, size = 10)
to <- sample (graph$to_id, size = 5)
flows <- matrix (10 * runif (length (from) * length (to)),
nrow = length (from))
View(flows)
View(msoa_lon_lat)
View(x)
View(x2)
x3 <- x %>% left_join(lon_lat, by = c("Area of residence" = "MSOA11CD")) %>%
rename(from_lon = lon, from_lat = lat)
View(x3)
x3 <- x %>% left_join(lon_lat, by = c("Area of residence" = "MSOA11CD")) %>%
rename(from_lon = lon, from_lat = lat)  %>%
left_join(lon_lat, by = c("Area of workplace" = "MSOA11CD")) %>%
rename(to_lon = lon, to_lat = lat)
rm(from)
rm(to)
rm(graph)
rm(flows)
# tranform into distance matrix for routing
x2 <- x %>% pivot_wider(names_from = `Area of workplace`, values_from = potential_demand) %>%
rownames(x2$MSOA11CD)
# tranform into distance matrix for routing
x2 <- x %>% pivot_wider(names_from = `Area of workplace`, values_from = potential_demand) #%>%
View(x2)
View(x)
# tranform into distance matrix for routing
x4 <- x %>% pivot_wider(names_from = `Area of workplace`, values_from = potential_demand) %>%
rownames(x4$'MSOA11CD$`Area of residence`')
x4
# tranform into distance matrix for routing
x2 <- x %>% pivot_wider(names_from = `Area of workplace`, values_from = potential_demand)
rownames(x2) <- (x2$'MSOA11CD$`Area of residence`')
rownames(x2) <- (x2$MSOA11CD$`Area of residence`)
rownames(x2) <- (x2$`Area of residence`)
# tranform into distance matrix for routing
x2 <- x %>% pivot_wider(names_from = `Area of workplace`, values_from = potential_demand)
column_to_rownames(.x2, var = "Area of residence")
column_to_rownames(x2, var = "Area of residence")
x4 <- column_to_rownames(x2, var = "Area of residence")
View(x4)
# tranform into distance matrix for routing
x5 <- x %>% pivot_wider(names_from = `Area of workplace`, values_from = potential_demand) %>%
column_to_rownames(var = "Area of residence")
View(x5)
# tranform into distance matrix for routing.
# column_to_rownames added so that 1st column is not the MSOA names. It assigns the MSOA names to the row ID
x2 <- x %>% pivot_wider(names_from = `Area of workplace`, values_from = potential_demand) %>%
tibble::column_to_rownames(var = "Area of residence")
rm(x3)
rm(x4)
rm(x5)
# get coordinates of origins and destinations. I am doi
x3 <- x %>% left_join(lon_lat, by = c("Area of residence" = "MSOA11CD")) %>%
rename(from_lon = lon, from_lat = lat)  %>%
left_join(lon_lat, by = c("Area of workplace" = "MSOA11CD")) %>%
rename(to_lon = lon, to_lat = lat)
View(x3)
from <- x3 %>% subset(select = c(from_lon, from_lat))
to   <- x3 %>% subset(select = c(to_lon, to_lat))
rm(iow_gf_region)
rm(london_gf_region)
View(from)
View(to)
View(x2)
graph <- read_csv('../data/weighted_graph.csv')
View(graph)
View(x2)
res <- dodgr_flows_aggregate(
graph = graph,
from = from,
to = to,
flows = x2,
contract = TRUE,
quiet = FALSE)
View(to)
View(x3)
View(x2)
View(x)
# I have it stored locally, but perhaps it is better to generate it from the distance_matrix script,
# due to differences in classes
graph2 <- read_csv('../data/weighted_graph.csv')
library(tidyverse)
library(sf)
library(dodgr)
# I have it stored locally, but perhaps it is better to generate it from the distance_matrix script,
# due to differences in classes
graph2 <- read_csv('../data/weighted_graph.csv')
x <- dodgr_to_sf(graph2)
View(x)
plot(st_geometry(x))
library(tidyverse)
library(sf)
library(dodgr)
streetnet2 <- dodgr_streetnet("london uk", expand = 0.05)
object.size(streetnet2)
rm(streetnet2)
clear_dodgr_cache()
ls()
# 217101 rows    # 1794.96 mb
memory.size(max=F)
gc()
memory.size()
pryr::mem_used()
pryr::mem_used()
bb_buffer <- function(city, buffer){
x <- osmdata::getbb (city, format_out = "sf_polygon") %>%
sf::st_transform(crs = 27700) %>%  # change crs to one that uses metres
sf::st_buffer(dist = buffer) %>%     # add buffer in metres
sf::st_transform(crs = 4326) %>%   # get original crs
sf::st_coordinates()               # get coordinates since dodgr_streetnet takes matrix argument
return(x)
}
bb_ldn <- bb_buffer(city = "london uk", buffer = 1000)
pryr::mem_used()
streetnet <- dodgr_streetnet(bbox = bb_ldn)    # rows     # mb
