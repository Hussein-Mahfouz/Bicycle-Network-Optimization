ggplot(data=grow_flow_infra_c , aes(x=dist_c, y=gcc_size_perc)) +
geom_line() +
ggtitle(chosen_city) +
labs(x = "Length of Investment (km)", y = "% of Edges in LCC",
subtitle="Edges in Largest Connected Component (LCC)") +
theme_minimal() +
theme(plot.subtitle = element_markdown())
# Plot how many kms of investment are needed on each highway type. Use the distance_group categorical variable
# to show how the investment on each highway type is split
grow_flow_infra_c %>% st_drop_geometry() %>%
group_by(highway, distance_groups) %>%
summarize(dist = sum(d) /1000) %>%
mutate(dist_perc = dist / sum(dist) * 100) %>%
dplyr::filter(!(highway %in% c('trunk_link', 'track', 'tertiary_link', 'steps',
'secondary_link', 'primary_link', 'living_street',
'motorway_link', 'cycleway'))) -> p
# plot of length of investment on each highway type
ggplot(data=p , aes(x=highway, y=dist, fill = distance_groups)) +
geom_col(position = position_stack(reverse = TRUE)) +
scale_fill_brewer(palette = "Blues", direction=-1) +
ggtitle("Investment on Different Highway Types") +
labs(x = "Highway Type", y = "Length (km)", fill = "Investment Priority \n(km groups)") +
theme_minimal() +
# edit angle of text, hjust argument so that text stays below plot AND center plot title
theme(axis.text.x = element_text(angle=50, hjust=1), plot.title = element_text(hjust = 0.5)) +
coord_flip()
# inverse sequence so that thickest edges are the ones selected first
grow_flow_infra_c$sequen_inv <- max(grow_flow_infra_c$sequen) - grow_flow_infra_c$sequen
# segments that had dedicated cycling infrastructure
initial_infra <- grow_flow_infra %>% filter(cycle_infra == 1)
#### Plot with colour proportional to km (from cumulative distance column) instead of sequence  ####
tm_shape(graph_sf) +
tm_lines(col = 'gray95') +
tm_shape(initial_infra) +
tm_lines(col = 'firebrick2',
lwd = 2) +
tm_shape(grow_flow_infra_c) +
tm_lines(title.col = "Priority (km)",
col = 'dist_c',    # could do col='sequen' to
lwd = 'sequen_inv',
scale = 1.8,     #multiply line widths by X
palette = "-Blues",
#style = "cont",   # to get a continuous gradient and not breaks
legend.lwd.show = FALSE) +
tm_layout(title = "Growing A Network Around Existing \nCycling Infrastructure",
title.size = 1.2,
title.color = "azure4",
title.position = c("left", "top"),
inner.margins = c(0.1, 0.1, 0.1, 0.1),    # bottom, left, top, and right margin
fontfamily = 'Georgia',
#legend.position = c("right", "bottom"),
frame = FALSE) + +
tm_scale_bar(color.dark = "gray60") +
# add legend for the existing cycling infrastructure
tm_add_legend(type = "line", labels = 'Existing Cycling Infrastructure', col = 'firebrick2', lwd = 2) -> p
#### Plot with colour proportional to km (from cumulative distance column) instead of sequence  ####
tm_shape(graph_sf) +
tm_lines(col = 'gray95') +
tm_shape(initial_infra) +
tm_lines(col = 'firebrick2',
lwd = 2) +
tm_shape(grow_flow_infra_c) +
tm_lines(title.col = "Priority (km)",
col = 'dist_c',    # could do col='sequen' to
lwd = 'sequen_inv',
scale = 1.8,     #multiply line widths by X
palette = "-Blues",
#style = "cont",   # to get a continuous gradient and not breaks
legend.lwd.show = FALSE) +
tm_layout(title = "Growing A Network Around Existing \nCycling Infrastructure",
title.size = 1.2,
title.color = "azure4",
title.position = c("left", "top"),
inner.margins = c(0.1, 0.1, 0.1, 0.1),    # bottom, left, top, and right margin
fontfamily = 'Georgia',
#legend.position = c("right", "bottom"),
frame = FALSE) +
tm_scale_bar(color.dark = "gray60") +
# add legend for the existing cycling infrastructure
tm_add_legend(type = "line", labels = 'Existing Cycling Infrastructure', col = 'firebrick2', lwd = 2) -> p
tmap_save(tm = p, filename = paste0("../data/", chosen_city,"/Plots/Growth_Results/growth_community_4_priority_all_FLOW.png"))
# clear environment
rm(grow_flow, grow_flow_c, grow_flow_c_100, grow_flow_infra, grow_flow_infra_c, grow_flow_infra_c_100,
grow_person_km, grow_person_km_c, growth_community_seeds, growth_community_seeds_c, growth_community_seeds_c_100,
initial_perc_satisfied_all, initial_perc_satisfied_comm, initial_infra)
chosen_city <- "Nottingham"
library(sf)
library(sfnetworks)
library(tidygraph)
library(tidyverse)
library(tmap)
################ 1. COMMUNITY DETECTION #################
# edges are the msoa od pairs.
# nodes are the msoa centroids
# You don''t need the nodes for community detection. They are used to store the community detection results
#tidygraph
nodes <- st_read(paste0("../data/", chosen_city,"/msoa_lon_lat.shp"))
edges <- read_csv(paste0("../data/", chosen_city,"/flows_for_desire_lines.csv"))
# change names of columns to from and to -> UNNECESSARY IF THEY ARE FIRST TWO COLUMNS
# edges <- edges %>% rename(from = `Area of residence`, to = `Area of workplace`)
# convert edge dataframe to graph
graph <- as_tbl_graph(edges, directed = FALSE)
# choose an a community detection algorithm and assign MSOAs to groups (weight is the flow)
graph_louvain <- graph %>%  activate(nodes) %>%
mutate(group = group_louvain(weights = `potential_demand`))
# extract nodes so that you can join group results onto the M
community_assignment <- graph_louvain %>% activate("nodes") %>% as_tibble()
# join group result to each MSOA
nodes <- nodes %>% dplyr::left_join(community_assignment, by =  c("msoa11cd" = "name"))
# count number of MSOAs in each group
nodes %>% st_drop_geometry() %>%
group_by(group) %>%
summarize(count = n()) %>% arrange(desc(count))
# read in msoa border geometry
msoa_borders <- st_read(paste0("../data/", chosen_city,"/msoas_geometry.shp"))
plot(st_geometry(msoa_borders))
plot(nodes['group'], add = TRUE)
# read in road edges with aggregated flow data
road_segments <- readRDS(paste0("../data/", chosen_city,"/graph_with_flows_weighted.RDS"))
#road_segments <- road_segments %>% dplyr::select(flow)
# plot
plot(st_geometry(msoa_borders))
plot(st_geometry(road_segments), add = TRUE, col = "darkred")
############### 2. ASSIGNING COMMUNITIES TO EDGES ###############
# We need to assign a community to each edge. I am doing this in two steps:
# 1. Assign each edge to an MSOA
# 2. Assign each edge to the same community of its MSOA
########## 2.1: FUNCTION FOR ASSIGNING ROAD EDGES TO MSOAS ###########
# Below function does the following:
# if road segment does not intersect with any msoa border, snap it to the nearesr msoa centroid
# if road segment interect (crosses) more than one msoa border, calculate the length of intersection with
# with all intersecting MSOAs and assign it to the one it intersect with most
# if road segment falls completely within one msoa, assign it to that msoa
assign_edge_to_polygon = function(x, y, z) {
# x = sf with linestring features (road edges)
# y = sf with polygon features (msoa borders)
# z = sf with point features (msoa centroids)
##############
#### this function requires a column in y and z named msoa11cd!!!! ####
###############
if (inherits(x, "sf")) n = nrow(x)
if (inherits(x, "sfc")) n = length(x)
out = do.call(c,
lapply(seq(n), function(i) {
# nrst is a list! It returns the msoa row number/s
nrst = st_intersects(st_geometry(x)[i], y)
# if intersect returns nothing, this edge is outside of all MSOA geometries
# get nearest msoa centroid to edge and assign it to it
if ( length (nrst[[1]]) == 0 ){
nrst = st_nearest_feature(st_geometry(x)[i], z)
msoa_code = as.character(z$msoa11cd[nrst[[1]]])
}
# if edge intersect with more than 1 msoa (does not fall completely inside 1), then
# find the length of intersection with each, and assign it to the one it intersects with more
else if ( length (nrst[[1]]) > 1 ){
# gets the msoa list position of the biggest intersection (intersection length with the different msoas is compared first)
a = which.max(st_length(st_intersection(st_geometry(x)[i], y)))
# [[1]] to get the list element with the intersecting msoas
# nrst is assigned to the msoa return from a
nrst =  nrst[[1]][a]
msoa_code = as.character(y$msoa11cd[nrst[[1]]])
}
# if edge falls completely inside 1 msoa, assign it to that msoa
else {
msoa_code = as.character(y$msoa11cd[nrst[[1]]])
}
# in all cases above, we get the msoa code by pointing to df$column[row number],
# where row number is retrieved from the nrst list through nrst[[1]]....ropey
return(msoa_code)
})
)
out = dplyr::as_tibble(out)
return(out)
}
# use function to assign each edge to an msoa. length of result = length of x
edge_msoas <- assign_edge_to_polygon(x =road_segments, y = msoa_borders, z = nodes)
# rename the column before binding
edge_msoas <- edge_msoas %>% rename(assigned_msoa = value)
# bind results to original road_segments sf
road_segments <- dplyr::bind_cols(road_segments, edge_msoas)
# plot for quick inspection
plot(st_geometry(msoa_borders))
plot(st_geometry(nodes), col = "grey", add = TRUE)
plot(road_segments['assigned_msoa'], add=TRUE)
###### 2.2: ASSIGN EACH EDGE TO THE SAME COMMUNITY AS ITS ASSOCIATED MSOA #######
road_segments <- road_segments %>% dplyr::left_join(community_assignment, by =  c("assigned_msoa" = "name"))
# quick plot
plot(road_segments['group'])
#################### 3. MAPPING  ######################
# 3.1. map of msoa centroids colored by community
# convert to character for legend
nodes$Community <- as.character(nodes$group)
tm_shape(msoa_borders) +
tm_borders(col = "grey80") +
tm_shape(nodes) +
tm_dots(col = "Community",
size = 0.1,
palette = "Dark2") +
tm_layout(fontfamily = 'Georgia',
legend.show = FALSE,
frame = FALSE) -> tm1
# 3.2. map of road segments colored by community
# convert group column to categorical so that we don't get 1-1.5, 2-2.5 etc in the legend
road_segments$Community <- as.character(road_segments$group)
tm_shape(road_segments) +
tm_lines(#title = "Community",
col = "Community",
palette = "Dark2") +
tm_layout(fontfamily = 'Georgia',
legend.show =FALSE,
frame = FALSE) +
tm_scale_bar(color.dark = "gray60") -> tm2
# 3.3  get legend only for facet map
tm_shape(road_segments) +
tm_lines(col = "Community",
palette = "Dark2") +
tm_layout(fontfamily = 'Georgia',
legend.only=TRUE,
frame = FALSE) -> tm_leg
# can do a tmap arrange here but am I bovered?!
tm_facet <- tmap_arrange(tm1, tm2, tm_leg, nrow=1)
#save
tmap_save(tm = tm_facet, filename = paste0("../data/", chosen_city,"/Plots/communities_", chosen_city, ".png"),
width=8.5, height=4)
# 3.4  MSOAs as cloropleth/choropleth/whatever
# add communitiy column to polygon geometry to create cloropleth map
msoa_borders <- nodes %>%
st_drop_geometry %>%
dplyr::select(msoa11cd, Community) %>%
right_join(msoa_borders, by = 'msoa11cd') %>%
st_as_sf()
tm_shape(msoa_borders) +
tm_fill(col = "Community",
palette = "Dark2") +
tm_layout(fontfamily = 'Georgia',
legend.show = FALSE,
frame = FALSE) -> tm3
tm_facet2 <- tmap_arrange(tm3, tm2, tm_leg, nrow=1)
tmap_save(tm = tm_facet2, filename = paste0("../data/", chosen_city,"/Plots/communities_alternative_", chosen_city, ".png"),
width=8.5, height=4)
# tmap with only the filled out MSOAs
tm_shape(msoa_borders) +
tm_fill(col = "Community",
palette = "Dark2") +
tm_layout(fontfamily = 'Georgia',
frame = FALSE) +
tm_scale_bar(color.dark = "gray60") -> tm_single
tmap_save(tm = tm_single, filename = paste0("../data/", chosen_city,"/Plots/communities_msoas", chosen_city, ".png"))
# save road_segments as an RDS to work with in the next script
saveRDS(road_segments, file = paste0("../data/", chosen_city, "/graph_with_flows_weighted_communities.Rds"))
# CLEAR ENVIRONMENT!!!
rm(community_assignment, edge_msoas, edges, graph, graph_louvain, msoa_borders, nodes, road_segments,
tm_facet, tm_facet2, tm_leg, tm1, tm2, tm3, tm_single, assign_edge_to_polygon)
# to check which features do not intersect at all with MSOAS #id:423
# mapview::mapview(road_segments, zcol="assigned_msoa") +
#   mapview::mapview(msoa_borders)
chosen_city <- 'Birmingham'
library(sf)
library(sfnetworks)
library(tidygraph)
library(tidyverse)
library(tmap)
################ 1. COMMUNITY DETECTION #################
# edges are the msoa od pairs.
# nodes are the msoa centroids
# You don''t need the nodes for community detection. They are used to store the community detection results
#tidygraph
nodes <- st_read(paste0("../data/", chosen_city,"/msoa_lon_lat.shp"))
edges <- read_csv(paste0("../data/", chosen_city,"/flows_for_desire_lines.csv"))
# change names of columns to from and to -> UNNECESSARY IF THEY ARE FIRST TWO COLUMNS
# edges <- edges %>% rename(from = `Area of residence`, to = `Area of workplace`)
# convert edge dataframe to graph
graph <- as_tbl_graph(edges, directed = FALSE)
# choose an a community detection algorithm and assign MSOAs to groups (weight is the flow)
graph_louvain <- graph %>%  activate(nodes) %>%
mutate(group = group_louvain(weights = `potential_demand`))
# extract nodes so that you can join group results onto the M
community_assignment <- graph_louvain %>% activate("nodes") %>% as_tibble()
# join group result to each MSOA
nodes <- nodes %>% dplyr::left_join(community_assignment, by =  c("msoa11cd" = "name"))
# count number of MSOAs in each group
nodes %>% st_drop_geometry() %>%
group_by(group) %>%
summarize(count = n()) %>% arrange(desc(count))
# read in msoa border geometry
msoa_borders <- st_read(paste0("../data/", chosen_city,"/msoas_geometry.shp"))
plot(st_geometry(msoa_borders))
plot(nodes['group'], add = TRUE)
# read in road edges with aggregated flow data
road_segments <- readRDS(paste0("../data/", chosen_city,"/graph_with_flows_weighted.RDS"))
#road_segments <- road_segments %>% dplyr::select(flow)
# plot
plot(st_geometry(msoa_borders))
plot(st_geometry(road_segments), add = TRUE, col = "darkred")
############### 2. ASSIGNING COMMUNITIES TO EDGES ###############
# We need to assign a community to each edge. I am doing this in two steps:
# 1. Assign each edge to an MSOA
# 2. Assign each edge to the same community of its MSOA
########## 2.1: FUNCTION FOR ASSIGNING ROAD EDGES TO MSOAS ###########
# Below function does the following:
# if road segment does not intersect with any msoa border, snap it to the nearesr msoa centroid
# if road segment interect (crosses) more than one msoa border, calculate the length of intersection with
# with all intersecting MSOAs and assign it to the one it intersect with most
# if road segment falls completely within one msoa, assign it to that msoa
assign_edge_to_polygon = function(x, y, z) {
# x = sf with linestring features (road edges)
# y = sf with polygon features (msoa borders)
# z = sf with point features (msoa centroids)
##############
#### this function requires a column in y and z named msoa11cd!!!! ####
###############
if (inherits(x, "sf")) n = nrow(x)
if (inherits(x, "sfc")) n = length(x)
out = do.call(c,
lapply(seq(n), function(i) {
# nrst is a list! It returns the msoa row number/s
nrst = st_intersects(st_geometry(x)[i], y)
# if intersect returns nothing, this edge is outside of all MSOA geometries
# get nearest msoa centroid to edge and assign it to it
if ( length (nrst[[1]]) == 0 ){
nrst = st_nearest_feature(st_geometry(x)[i], z)
msoa_code = as.character(z$msoa11cd[nrst[[1]]])
}
# if edge intersect with more than 1 msoa (does not fall completely inside 1), then
# find the length of intersection with each, and assign it to the one it intersects with more
else if ( length (nrst[[1]]) > 1 ){
# gets the msoa list position of the biggest intersection (intersection length with the different msoas is compared first)
a = which.max(st_length(st_intersection(st_geometry(x)[i], y)))
# [[1]] to get the list element with the intersecting msoas
# nrst is assigned to the msoa return from a
nrst =  nrst[[1]][a]
msoa_code = as.character(y$msoa11cd[nrst[[1]]])
}
# if edge falls completely inside 1 msoa, assign it to that msoa
else {
msoa_code = as.character(y$msoa11cd[nrst[[1]]])
}
# in all cases above, we get the msoa code by pointing to df$column[row number],
# where row number is retrieved from the nrst list through nrst[[1]]....ropey
return(msoa_code)
})
)
out = dplyr::as_tibble(out)
return(out)
}
# use function to assign each edge to an msoa. length of result = length of x
edge_msoas <- assign_edge_to_polygon(x =road_segments, y = msoa_borders, z = nodes)
# rename the column before binding
edge_msoas <- edge_msoas %>% rename(assigned_msoa = value)
# bind results to original road_segments sf
road_segments <- dplyr::bind_cols(road_segments, edge_msoas)
# plot for quick inspection
plot(st_geometry(msoa_borders))
plot(st_geometry(nodes), col = "grey", add = TRUE)
plot(road_segments['assigned_msoa'], add=TRUE)
###### 2.2: ASSIGN EACH EDGE TO THE SAME COMMUNITY AS ITS ASSOCIATED MSOA #######
road_segments <- road_segments %>% dplyr::left_join(community_assignment, by =  c("assigned_msoa" = "name"))
# quick plot
plot(road_segments['group'])
#################### 3. MAPPING  ######################
# 3.1. map of msoa centroids colored by community
# convert to character for legend
nodes$Community <- as.character(nodes$group)
tm_shape(msoa_borders) +
tm_borders(col = "grey80") +
tm_shape(nodes) +
tm_dots(col = "Community",
size = 0.1,
palette = "Dark2") +
tm_layout(fontfamily = 'Georgia',
legend.show = FALSE,
frame = FALSE) -> tm1
# 3.2. map of road segments colored by community
# convert group column to categorical so that we don't get 1-1.5, 2-2.5 etc in the legend
road_segments$Community <- as.character(road_segments$group)
tm_shape(road_segments) +
tm_lines(#title = "Community",
col = "Community",
palette = "Dark2") +
tm_layout(fontfamily = 'Georgia',
legend.show =FALSE,
frame = FALSE) +
tm_scale_bar(color.dark = "gray60") -> tm2
# 3.3  get legend only for facet map
tm_shape(road_segments) +
tm_lines(col = "Community",
palette = "Dark2") +
tm_layout(fontfamily = 'Georgia',
legend.only=TRUE,
frame = FALSE) -> tm_leg
# can do a tmap arrange here but am I bovered?!
tm_facet <- tmap_arrange(tm1, tm2, tm_leg, nrow=1)
#save
tmap_save(tm = tm_facet, filename = paste0("../data/", chosen_city,"/Plots/communities_", chosen_city, ".png"),
width=8.5, height=4)
# 3.4  MSOAs as cloropleth/choropleth/whatever
# add communitiy column to polygon geometry to create cloropleth map
msoa_borders <- nodes %>%
st_drop_geometry %>%
dplyr::select(msoa11cd, Community) %>%
right_join(msoa_borders, by = 'msoa11cd') %>%
st_as_sf()
tm_shape(msoa_borders) +
tm_fill(col = "Community",
palette = "Dark2") +
tm_layout(fontfamily = 'Georgia',
legend.show = FALSE,
frame = FALSE) -> tm3
tm_facet2 <- tmap_arrange(tm3, tm2, tm_leg, nrow=1)
tmap_save(tm = tm_facet2, filename = paste0("../data/", chosen_city,"/Plots/communities_alternative_", chosen_city, ".png"),
width=8.5, height=4)
# tmap with only the filled out MSOAs
tm_shape(msoa_borders) +
tm_fill(col = "Community",
palette = "Dark2") +
tm_layout(fontfamily = 'Georgia',
frame = FALSE) +
tm_scale_bar(color.dark = "gray60") -> tm_single
tmap_save(tm = tm_single, filename = paste0("../data/", chosen_city,"/Plots/communities_msoas", chosen_city, ".png"))
# save road_segments as an RDS to work with in the next script
saveRDS(road_segments, file = paste0("../data/", chosen_city, "/graph_with_flows_weighted_communities.Rds"))
# CLEAR ENVIRONMENT!!!
rm(community_assignment, edge_msoas, edges, graph, graph_louvain, msoa_borders, nodes, road_segments,
tm_facet, tm_facet2, tm_leg, tm1, tm2, tm3, tm_single, assign_edge_to_polygon)
# to check which features do not intersect at all with MSOAS #id:423
# mapview::mapview(road_segments, zcol="assigned_msoa") +
#   mapview::mapview(msoa_borders)
library(dplyr)
library(readr)
library(tidyr)
library(ggplot2)
library(ggrepel)
# this is a lookup table matching MSOAs to major towns and cities
city_names <- read_csv('../data-raw/Middle_Layer_Super_Output_Area__2011__to_Major_Towns_and_Cities__December_2015__Lookup_in_England_and_Wales.csv')
# change column name
city_names <- city_names %>% rename(city = TCITY15NM)
#unique cities
unique(city_names$city)
# number of MSOAs in each city
no_msoas <- city_names %>% dplyr::group_by(city) %>% dplyr::tally()
##### CHOOSE YOU CITY
chosen_city <- "Manchester"
#create a directory to store data related to this city (does nothing if directory already exists)
dir.create(paste0("../data/", chosen_city), showWarnings = FALSE)
# create sub-directory to save plots as well
dir.create(paste0("../data/", chosen_city,"/Plots"), showWarnings = FALSE)
##### CHOOSE YOU CITY
# flow data from the 2011 census https://www.nomisweb.co.uk/census/2011/bulk/rOD1
flows <- read_csv('../data-raw/flow_data.csv')
###############
# MERGING NAMES WITH FLOW DATA (TO GET INTERNAL FLOWS IN ANY CITY)
###############
# add a column with the city name corresponding to each Residence MSOA
flows <- flows %>% left_join(city_names[,c("MSOA11CD", "city")],
by = c("Area of residence" = "MSOA11CD")) %>%
rename(city_origin = city) # rename column so that we know it is referring to the 'Area of residence'
# add a column with the city name corresponding to each Workplace MSOA
flows <- flows %>% left_join(city_names[,c("MSOA11CD", "city")],
by = c("Area of workplace" = "MSOA11CD")) %>%
rename(city_dest = city) # rename column so that we know it is referring to the 'Area of workplace'
# get mode share for all cities - just for report
cycle_mode_share <- flows %>%
filter(city_origin == city_dest) %>%   # only internal flows
group_by(city_origin, city_dest) %>%
summarize(mode_share = (sum(Bicycle) / sum(`All categories: Method of travel to work`)) *100,
all = sum(`All categories: Method of travel to work`)) %>%
arrange(mode_share)
# plot
cycle_mode_share %>% #filter(city_origin != 'London') %>%
ggplot(aes(all, mode_share)) +
geom_point(aes(alpha = mode_share), show.legend = FALSE) +
# some filtering labels for aesthetic purposes
geom_label_repel(aes(label = ifelse(mode_share>12 | all> (2.3*mean(all)), as.character(city_origin),'')),
size =2.5) +
labs(x="Total Number of Commuters", y = "Cycling Mode Share (%)") +
scale_x_continuous(trans='log10', labels = scales::comma) +
theme_minimal()
ggsave("../data/uk_cities_mode_share.png")
# Subset flows to keep only those that are within a specific city
# function to return rows where origin and destination match the specified city name
flows_internal <- function(name) {
x <- flows %>% filter(city_origin == name, city_dest == name)
return(x)
}
# use function to get flows between all MSOAs in city. Remove pairs with total flow < 10
flows_city <- flows_internal(chosen_city) %>%
dplyr::filter(`All categories: Method of travel to work` > 10)
# save as csv to use in next step
write_csv(flows_city, path = paste0("../data/", chosen_city, "/flows_city.csv"))
View(cycle_mode_share)
# plot
cycle_mode_share %>% #filter(city_origin != 'London') %>%
ggplot(aes(all, mode_share)) +
geom_point(aes(alpha = mode_share), show.legend = FALSE) +
# some filtering labels for aesthetic purposes
geom_label_repel(aes(label = ifelse(mode_share>12 | all> (2.3*mean(all)) | city_origin == 'Manchester' , as.character(city_origin),'')),
size =2.5) +
labs(x="Total Number of Commuters", y = "Cycling Mode Share (%)") +
scale_x_continuous(trans='log10', labels = scales::comma) +
theme_minimal()
ggsave("../data/uk_cities_mode_share.png")
# plot
cycle_mode_share %>% #filter(city_origin != 'London') %>%
ggplot(aes(all, mode_share)) +
geom_point(aes(alpha = mode_share), show.legend = FALSE) +
# some filtering labels for aesthetic purposes. Add Manchester explicitly as it is my case study
geom_label_repel(aes(label = ifelse(mode_share>12 | all> (2.3*mean(all)) | city_origin %in% c('Manchester', 'Nottingham', 'Birmingham') , as.character(city_origin),'')),
size =2.5) +
labs(x="Total Number of Commuters", y = "Cycling Mode Share (%)") +
scale_x_continuous(trans='log10', labels = scales::comma) +
theme_minimal()
ggsave("../data/uk_cities_mode_share.png")
