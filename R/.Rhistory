rename(lon = X, lat = Y)
msoa_lon_lat2 <- msoa_centroids_snapped %>%
cbind(st_coordinates(.)) %>%
rename(lon = X, lat = Y)
View(msoa_lon_lat2)
msoa_lon_lat2 <- msoa_centroids_snapped %>%
cbind(st_coordinates(.)) %>%
rename(lon = X, lat = Y) %>%
select(c(lon, lat))
View(msoa_lon_lat2)
msoa_lon_lat2 <- msoa_centroids_snapped %>%
cbind(st_coordinates(.)) %>%
st_drop_geometry() %>%
rename(lon = X, lat = Y) %>%
select(c(lon, lat))
View(msoa_lon_lat2)
View(msoa_centroids_snapped)
#clear environment
rm(roads)
#1. Get stree network and filter main road types (filter argument can be changed)
pts <- st_coordinates (msoa_centroids_pct)
View(pts)
# get population weighted centroids from pct
msoa_centroids_pct <- pct::get_pct_centroids( region = "london", geography = "msoa") %>%
select(c(geo_code, geo_name, geometry))
View(msoa_lon_lat)
View(msoa_lon_lat2)
roads <- dodgr_streetnet(pts = pts, expand = 0.05) %>%
filter(highway %in% c('primary', 'secondary', 'tertiary'))
library(tidyverse)
library(dodgr)
library(sf)
library(osmdata)
library(lwgeom)
# this is a lookup table matching MSOAs to major towns and cities
city_names <- read_csv('../data-raw/Middle_Layer_Super_Output_Area__2011__to_Major_Towns_and_Cities__December_2015__Lookup_in_England_and_Wales.csv')
# change column name
city_names <- city_names %>% rename(city = TCITY15NM)
# flow data from the 2011 census https://www.nomisweb.co.uk/census/2011/bulk/rOD1
flows <- read_csv('../data-raw/flow_data.csv')
# add a column with the city name corresponding to each Residence MSOA
flows <- flows %>% left_join(city_names[,c("MSOA11CD", "city")],
by = c("Area of residence" = "MSOA11CD")) %>%
rename(city_origin = city) # rename column so that we know it is referring to the 'Area of residence'
# add a column with the city name corresponding to each Workplace MSOA
flows <- flows %>% left_join(city_names[,c("MSOA11CD", "city")],
by = c("Area of workplace" = "MSOA11CD")) %>%
rename(city_dest = city) # rename column so that we know it is referring to the 'Area of workplace'
# Subset flows to keep only those that are within a specific city
flows_internal <- function(name) {
x <- flows %>% filter(city_origin == name, city_dest == name)
return(x)
}
# use function to get flows between all MSOAs in Oxford
flows_ox <- flows_internal("Oxford") %>% select(1:3) %>%
rename(potential_demand = `All categories: Method of travel to work`)   # TEMPORARY!!
#clear env
rm(flows)
# download spatial data locally and read it
msoa_boundaries <- st_read('../data-raw/MSOA_2011_Boundaries/Middle_Layer_Super_Output_Areas__December_2011__Boundaries.shp') %>%
st_transform(4326)   # transform to EPSG 4326 for dodgr routing later
# function to filter MSOAs that are within a certain city
msoas_city <- function(name) {
x <- city_names %>% filter(city == name)
return(x)
}
# get msoas in Oxford
msoas_ox <- msoas_city("Oxford")
# Add spatial data to oxford msoas
spatial_ox <-
msoas_ox[, c("MSOA11CD", "MSOA11NM")] %>%
left_join(msoa_boundaries[ , c("msoa11cd", "geometry")], by = c("MSOA11CD" = "msoa11cd")) %>%
st_as_sf() %>% lwgeom::st_make_valid() %>%
mutate(centroid = st_centroid(geometry))  # we will need centroids to calculate distance matrix
#clear env
rm(msoa_boundaries)
# Remove border geometry and set centroids as geometry. This does not overwrite 'spatial_ox' sf
msoa_centroids <-
st_drop_geometry(spatial_ox) %>%
st_set_geometry('centroid')
#1. Get stree network and filter main road types (filter argument can be changed)
pts <- st_coordinates (msoa_centroids)
View(pts)
roads <- dodgr_streetnet(pts = pts, expand = 0.05) %>%
filter(highway %in% c('primary', 'secondary', 'tertiary'))
# check how the points were shifted
plot(st_geometry(roads))
# function from https://stackoverflow.com/questions/51292952/snap-a-point-to-the-closest-point-on-a-line-segment-using-sf
st_snap_points = function(x, y, max_dist = 1000) {
if (inherits(x, "sf")) n = nrow(x)
if (inherits(x, "sfc")) n = length(x)
out = do.call(c,
lapply(seq(n), function(i) {
nrst = st_nearest_points(st_geometry(x)[i], y)
nrst_len = st_length(nrst)
nrst_mn = which.min(nrst_len)
if (as.vector(nrst_len[nrst_mn]) > max_dist) return(st_geometry(x)[i])
return(st_cast(nrst[nrst_mn], "POINT")[2])
})
)
return(out)
}
msoa_centroids_snapped <-
st_snap_points(msoa_centroids, roads, max_dist = 1000) %>%   # if dist to nearest road > max dist, point is unchanged
st_as_sf() %>%   # convert to get it in a dataframe
bind_cols(msoa_centroids) %>%  # bind with msoa centroids df to ge MSOA IDs
select(-c(centroid)) %>% # drop old geometry
rename(centroid = x)
# check how the points were shifted
plot(st_geometry(roads))
plot(st_geometry(msoa_centroids), add = TRUE, col = 'red')
plot(st_geometry(msoa_centroids_snapped), add = TRUE, col = 'green')
# check that bind_cols() was correct. Plot individual points:
plot(st_geometry(roads))
plot(st_geometry(msoa_centroids$centroid[1]), add = TRUE, col = 'red')
plot(st_geometry(msoa_centroids_snapped$centroid[1]), add = TRUE, col = 'green')
#clear environment
rm(roads)
# function to split c(lat, lon) to two seperate columns  FROM JM London (https://github.com/r-spatial/sf/issues/231)
# lat = Y lon = X
split_lon_lat <- function(x, names = c("lon","lat")) {
stopifnot(inherits(x,"sf") && inherits(sf::st_geometry(x),"sfc_POINT"))
ret <- sf::st_coordinates(x)
ret <- tibble::as_tibble(ret)
stopifnot(length(names) == ncol(ret))
x <- x[ , !names(x) %in% names]
ret <- setNames(ret,names)
dplyr::bind_cols(x,ret)
}
# get lon and lat as seperate columns
#lon_lat <-  msoa_centroids %>% split_lon_lat() %>% select(-c(MSOA11NM))
lon_lat <-  msoa_centroids_snapped %>% split_lon_lat() %>% select(-c(MSOA11NM))
View(lon_lat)
View(msoa_centroids_snapped)
class(lon_lat)
lon_lat2 <- msoa_centroids_snapped %>%
cbind(st_coordinates(msoa_centroids_snapped))
View(lon_lat2)
View(lon_lat)
lon_lat2 <- msoa_centroids_snapped %>%
cbind(st_coordinates(msoa_centroids_snapped)) %>%
rename(lon = X, lat = Y) %>%
select(-c(MSOA11NM))
View(lon_lat2)
View(lon_lat)
class(lon_lat2)
class(lon_lat)
lon_lat == lon_lat2
# check functions.R for documentation.
#bb_ox <- bb_buffer(city= "oxford uk", buffer= 1000)
#streetnet <- dodgr_streetnet (bbox = bb_ox)
##########
pts <- st_coordinates (lon_lat)
#1. Get stree network and filter main road types (filter argument can be changed)
pts <- st_coordinates (msoa_centroids)
library(tidyverse)
library(dodgr)
library(sf)
library(osmdata)
library(lwgeom)
library(pct)
# get population weighted centroids from pct
msoa_centroids_pct <- pct::get_pct_centroids( region = "london", geography = "msoa") %>%
select(c(geo_code, geo_name, geometry))
#1. Get stree network and filter main road types (filter argument can be changed)
# get boundary to query OSM roads from
pts <- st_coordinates (msoa_centroids_pct)
View(msoa_centroids_pct)
roads <- dodgr_streetnet(pts = pts, expand = 0.05) %>%
filter(highway %in% c('primary', 'secondary', 'tertiary'))
View(msoa_centroids_pct)
View(msoa_centroids_pct)
# get population weighted centroids from pct
msoa_centroids <- pct::get_pct_centroids( region = "london", geography = "msoa") %>%
select(c(geo_code, geo_name, geometry)) %>% rename(MSOA11CD = geo_code)
View(msoa_centroids)
# this is a lookup table matching MSOAs to major towns and cities
city_names <- read_csv('../data-raw/Middle_Layer_Super_Output_Area__2011__to_Major_Towns_and_Cities__December_2015__Lookup_in_England_and_Wales.csv')
# change column name
city_names <- city_names %>% rename(city = TCITY15NM)
# flow data from the 2011 census https://www.nomisweb.co.uk/census/2011/bulk/rOD1
flows <- read_csv('../data-raw/flow_data.csv')
# add a column with the city name corresponding to each Residence MSOA
flows <- flows %>% left_join(city_names[,c("MSOA11CD", "city")],
by = c("Area of residence" = "MSOA11CD")) %>%
rename(city_origin = city) # rename column so that we know it is referring to the 'Area of residence'
# add a column with the city name corresponding to each Workplace MSOA
flows <- flows %>% left_join(city_names[,c("MSOA11CD", "city")],
by = c("Area of workplace" = "MSOA11CD")) %>%
rename(city_dest = city) # rename column so that we know it is referring to the 'Area of workplace'
flows_internal <- function(name) {
x <- flows %>% filter(city_origin == name, city_dest == name)
return(x)
}
# use function to get flows between all MSOAs in London
flows_london <- flows_internal("London")
View(flows_london)
View(flows_london)
View(flows_london)
# save to use in calculation of potential demand (next script)
flows_london <- readr::read_csv("../data/flows_london.csv")
class(flows_london)
View(flows_london)
flows_london %>% subset(select = -c(city_origin, city_dest))
library(tidyverse)
library(dodgr)
library(sf)
library(osmdata)
library(lwgeom)
library(pct)
# get population weighted centroids from pct
msoa_centroids <- pct::get_pct_centroids( region = "london", geography = "msoa") %>%
select(c(geo_code, geo_name, geometry)) %>% rename(MSOA11CD = geo_code)
View(msoa_centroids)
#1. Get stree network and filter main road types (filter argument can be changed)
# get boundary to query OSM roads from
pts <- st_coordinates (msoa_centroids)
roads <- dodgr_streetnet(pts = pts, expand = 0.05)
library(osmdata)
library(osmdata)
bb <- osmdata::getbb ("oxford uk", format_out = "polygon")
bb <- osmdata::getbb ("london uk", format_out = "polygon")
plot(bb)
bb <- osmdata::getbb ("london uk", format_out = "sf_polygon")
plot(bb)
roads <- opq(bbox = bb) %>%
add_osm_feature(key = 'highway', value = c('primary', 'secondary', 'tertiary')) %>%
osmdata_sf () %>%
trim_osmdata (bb)
class(roads)
# check that bind_cols() was correct. Plot individual points:
plot(st_geometry(roads))
st_as_sf(roads)
# function from https://stackoverflow.com/questions/51292952/snap-a-point-to-the-closest-point-on-a-line-segment-using-sf
st_snap_points = function(x, y, max_dist = 1000) {
if (inherits(x, "sf")) n = nrow(x)
if (inherits(x, "sfc")) n = length(x)
out = do.call(c,
lapply(seq(n), function(i) {
nrst = st_nearest_points(st_geometry(x)[i], y)
nrst_len = st_length(nrst)
nrst_mn = which.min(nrst_len)
if (as.vector(nrst_len[nrst_mn]) > max_dist) return(st_geometry(x)[i])
return(st_cast(nrst[nrst_mn], "POINT")[2])
})
)
return(out)
}
msoa_centroids_snapped <-
st_snap_points(msoa_centroids, roads, max_dist = 1000) %>%   # if dist to nearest road > max dist, point is unchanged
st_as_sf() %>%   # convert to get it in a dataframe
bind_cols(msoa_centroids) %>%  # bind with msoa centroids df to ge MSOA IDs
select(-c(geometry)) %>% # drop old geometry
rename(centroid = x)
crs(msoa_centroids)
st_crs(msoa_centroids)
st_crs(roads)
st_crs(roads) <- 4326
plot(roads)
View(roads)
View(roads$osm_lines)
plot(roads$osm_lines)
st_crs(roads$osm_lines)
xx <- (roads$osm_lines)
xx <- roads$osm_lines
st_crs(xx)
View(xx)
plot(st_geometry(xx))
rm(xx)
rm(xx)
roads2 <- roads$osm_lines
msoa_centroids_snapped <-
st_snap_points(msoa_centroids, roads2, max_dist = 1000) %>%   # if dist to nearest road > max dist, point is unchanged
st_as_sf() %>%   # convert to get it in a dataframe
bind_cols(msoa_centroids) %>%  # bind with msoa centroids df to ge MSOA IDs
select(-c(geometry)) %>% # drop old geometry
rename(centroid = x)
# save this version for routing in `4_aggregating_flows`
msoa_centroids_snapped %>% cbind(st_coordinates(.)) %>%
rename(lon = X, lat = Y) %>%
select(-c(geo_name)) %>%
write_csv(path = "../data/msoa_lon_lat.csv")
# check how the points were shifted
plot(st_geometry(roads2))
plot(st_geometry(msoa_centroids), add = TRUE, col = 'red')
plot(st_geometry(msoa_centroids_snapped), add = TRUE, col = 'green')
# check that bind_cols() was correct. Plot individual points:
plot(st_geometry(roads2))
rm(roads)
# check that bind_cols() was correct. Plot individual points:
plot(st_geometry(roads2))
plot(st_geometry(msoa_centroids$centroid[1]), add = TRUE, col = 'red')
View(msoa_centroids)
plot(st_geometry(msoa_centroids$geometry[1]), add = TRUE, col = 'red')
plot(st_geometry(msoa_centroids_snapped$centroid[1]), add = TRUE, col = 'green')
plot(st_geometry(msoa_centroids$geometry[5]), add = TRUE, col = 'red')
plot(st_geometry(msoa_centroids_snapped$centroid[5]), add = TRUE, col = 'green')
plot(st_geometry(msoa_centroids$geometry[50]), add = TRUE, col = 'red')
plot(st_geometry(msoa_centroids_snapped$centroid[50]), add = TRUE, col = 'green')
# for dodgr_dist calculations (below)
msoa_lon_lat <- msoa_centroids_snapped %>%
cbind(st_coordinates(.)) %>%      #split geometry into X and Y columns
st_drop_geometry() %>%            #drop original geometry
rename(lon = X, lat = Y) %>%      # rename x and y
select(c(lon, lat))               # keep coordinates only
View(msoa_lon_lat)
x <- read_csv("../data/msoa_lon_lat.csv")
View(x)
class(x)
x <- st_read("../data/msoa_lon_lat.csv") st_drop_geometry() %>%
############
# DISTANCE MATRIX USING DODGR
############
# this downloads all the road data from OSM (equivalent to : key = 'highway')
pts <- st_coordinates (msoa_centroids_snapped)
x <- st_read("../data/msoa_lon_lat.csv") #st_drop_geometry() %>%
x <- read_csv("../data/msoa_lon_lat.csv") %>%
select(c(lon, lat))
View(x)
msoa_lon_lat == x
class(x)
class(msoa_lon_lat)
x <- read_csv("../data/msoa_lon_lat.csv") %>% as.data.frame() %>%
select(c(lon, lat))
class(x)
# centroids for bounding box
msoa_centroids <- st_read("../data/alt_city/msoa_lon_lat.shp")
# centroids for bounding box
msoa_centroids <- readr::st_read("../data/alt_city/msoa_lon_lat.shp")
# centroids for bounding box
msoa_centroids <- sf::st_read("../data/alt_city/msoa_lon_lat.shp")
library(sf)
library(dodgr)
library(tidyverse)
# bounding box
pts <- st_coordinates (msoa_centroids)
#this downloads all the road data from OSM (equivalent to : key = 'highway')
streetnet <- dodgr_streetnet(pts = pts, expand = 0.05)
# filter out useful columns
streetnet2 <- streetnet %>%
dplyr::select(osm_id, bicycle, bicycle_road, cycleway, highway,
lanes, maxspeed, segregated)
# add length column
streetnet2 <- streetnet2 %>% dplyr::mutate(length_m = st_length(.))
# check different columns
bicycle <- streetnet2 %>%
st_drop_geometry() %>%
group_by(bicycle) %>%
summarize(segments=n(), `length (m)` = sum(length_m))
View(bicycle)
cycleway <- streetnet2 %>%
st_drop_geometry() %>%
group_by(cycleway) %>%
summarize(segments=n(), `length (m)` = sum(length_m))
View(cycleway)
View(bicycle)
View(bicycle)
bicycle_road <- streetnet2 %>%
st_drop_geometry() %>%
group_by(bicycle_road) %>%
summarize(segments=n(), `length (m)` = sum(length_m))
View(bicycle_road)
highway <- streetnet2 %>%
st_drop_geometry() %>%
group_by(highway) %>%
summarize(segments=n(), `length (m)` = sum(length_m))
View(highway)
lanes <- streetnet2 %>%
st_drop_geometry() %>%
group_by(lanes) %>%
summarize(segments=n(), `length (m)` = sum(length_m))
View(lanes)
maxspeed <- streetnet2 %>%
st_drop_geometry() %>%
group_by(maxspeed) %>%
summarize(segments=n(), `length (m)` = sum(length_m))
View(maxspeed)
segregated <- streetnet2 %>%
st_drop_geometry() %>%
group_by(segregated) %>%
summarize(segments=n(), `length (m)` = sum(length_m))
View(segregated)
View(bicycle)
bicycle_designated <- streetnet2 %>% filter(bicycle == 'designated')
cycleways <- streetnet2 %>% filter(highway == 'cycleway')
plot(st_geometry(cycleways))
plot(st_geometry(bicycle_designated), color = 'red', add = TRUE)
plot(st_geometry(cycleways))
plot(st_geometry(bicycle_designated), add = TRUE, col = 'red')
plot(st_geometry(cycleways))
plot(st_geometry(bicycle_designated))
?st_difference
st_difference(bicycle_designated, cycleways)
x <- st_difference(bicycle_designated, cycleways)
y <- st_difference(cycleways, bicycle_designated)
plot(st_geometry(x))
plot(st_geometry(y))
rm(x, y)
?st_disjoint
x <- st_disjoint(cycleways, bicycle_designated)
View(x)
x[[1]]
class(x)
logical = lengths(x) > 0
x2 = bicycle_designated[logical, ]
x2 = cycleways[logical, ]
plot(st_geometry(cycleways))
plot(st_geometry(x2))
x <- st_disjoint(bicycle_designated, cycleways)
logical = lengths(x) > 0
x2 = bicycle_designated[logical, ]
x <- st_within(bicycle_designated, cycleways)
logical = lengths(x) > 0
x2 = bicycle_designated[logical, ]
View(bicycle_road)
View(cycleway)
#this downloads all the road data from OSM (equivalent to : key = 'highway')
streetnet <- dodgr_streetnet("manchester uk", expand = 0.05)
View(streetnet)
plot(st_geometry(streetnet))
plot(st_geometry(streetnet2))
# filter out useful columns
streetnet2 <- streetnet %>%
dplyr::select(osm_id, bicycle, bicycle_road, cycleway, highway,
lanes, maxspeed, segregated)
# add length column
streetnet2 <- streetnet2 %>% dplyr::mutate(length_m = st_length(.))
# filter out useful columns
streetnet2 <- streetnet %>%
dplyr::select(osm_id, bicycle, cycleway, highway,
lanes, segregated)
# add length column
streetnet2 <- streetnet2 %>% dplyr::mutate(length_m = st_length(.))
# check different columns
# bicycle column
streetnet2 %>%
st_drop_geometry() %>%
group_by(bicycle) %>%
summarize(segments=n(), `length (m)` = sum(length_m))
#cycleway column
streetnet2 %>%
st_drop_geometry() %>%
group_by(cycleway) %>%
summarize(segments=n(), `length (m)` = sum(length_m))
#highway column
streetnet2 %>%
st_drop_geometry() %>%
group_by(highway) %>%
summarize(segments=n(), `length (m)` = sum(length_m))
#lanes column
streetnet2 %>%
st_drop_geometry() %>%
group_by(lanes) %>%
summarize(segments=n(), `length (m)` = sum(length_m))
#segregated column
streetnet2 %>%
st_drop_geometry() %>%
group_by(segregated) %>%
summarize(segments=n(), `length (m)` = sum(length_m))
# How is bicycle=designated different to highway=cycleway
bicycle_designated <- streetnet2 %>% filter(bicycle == 'designated')
plot(st_geometry(bicycle_designated))
plot(st_geometry(high_cycleway))
high_cycleway <- streetnet2 %>% filter(highway == 'cycleway')
plot(st_geometry(high_cycleway))
gh <- streetnet2 %>% filter(bicycle == 'designated', highway != 'cycleway')
View(gh)
plot(st_geometry(gh))
View(bicycle_designated)
hh <- streetnet2 %>% filter(bicycle != 'designated', highway == 'cycleway')
plot(st_geometry(hh))
# cycleways that do not have designated bicycle lane tag
cycleway_not_designated <- streetnet2 %>% filter(bicycle != 'designated', highway == 'cycleway')
plot(st_geometry(cycleway_not_designated))
plot(st_geometry(cycleways))
plot(st_geometry(bicycle_designated), add = TRUE, col = 'red')
plot(st_geometry(lane_not_cycleway))
# designated bicycle lanes that do not have cycleway tag
lane_not_cycleway <- streetnet2 %>% filter(bicycle == 'designated', highway != 'cycleway')
plot(st_geometry(lane_not_cycleway))
#highway=cycleway
plot(st_geometry(cycleways))
#bicycle=designated
plot(st_geometry(bicycle_designated), add = TRUE, col = 'red')
plot(st_geometry(lane_not_cycleway), add = TRUE, col = 'blue')
#highway=cycleway
plot(st_geometry(cycleways))
#bicycle=designated
plot(st_geometry(bicycle_designated), add = TRUE, col = 'red')
#bicycle=designated
plot(st_geometry(bicycle_designated))
#bicycle=designated BUT highway != cycleway
plot(st_geometry(lane_not_cycleway), add = TRUE, col = 'blue')
#bicycle=designated BUT highway != cycleway
plot(st_geometry(lane_not_cycleway), add = TRUE, col = 'red')
plot(st_geometry(cycleways))
plot(st_geometry(cycleway_not_designated), add = TRUE, col = 'red')
plot(st_geometry(cycleways))
plot(st_geometry(cycleway_not_designated), add = TRUE, col = 'red')
plot(st_geometry(high_cycleway))
plot(st_geometry(cycleway_not_designated), add = TRUE, col = 'red')
plot(st_geometry(high_cycleway))
plot(st_geometry(cycleway_not_designated), add = TRUE, col = 'red')
plot(st_geometry(high_cycleway))
plot(st_geometry(cycleway_not_designated), add = TRUE, col = 'red')
plot(st_geometry(high_cycleway))
plot(st_geometry(cycleway_not_designated), add = TRUE, col = 'red')
plot(st_geometry(high_cycleway))
reprex:::reprex_addin()
unique(streetnet2$highway)
reprex:::reprex_addin()
reprex:::reprex_addin()
