library(readr)
library(dplyr)
library(tidyr)
library(sf)
library(lwgeom)


# this is a lookup table matching MSOAs to major towns and cities
city_names <- read_csv('../data-raw/Middle_Layer_Super_Output_Area__2011__to_Major_Towns_and_Cities__December_2015__Lookup_in_England_and_Wales.csv') 
# change column name
city_names <- city_names %>% rename(city = TCITY15NM)

# flow data from the 2011 census https://www.nomisweb.co.uk/census/2011/bulk/rOD1
flows <- read_csv('../data-raw/flow_data.csv')

# MERGING NAMES WITH FLOW DATA (TO GET INTERNAL FLOWS IN ANY CITY)

# add a column with the city name corresponding to each Residence MSOA
flows <- merge(flows, city_names[,c("MSOA11CD", "city")], by.x = "Area of residence", by.y = "MSOA11CD") %>% 
               rename(city_origin = city) # rename column so that we know it is referring to the 'Area of residence'

# add a column with the city name corresponding to each Workplace MSOA
flows <- merge(flows, city_names[,c("MSOA11CD", "city")], by.x = "Area of workplace", by.y = "MSOA11CD") %>% 
               rename(city_dest = city) # rename column so that we know it is referring to the 'Area of workplace'


# Subset flows to keep only those that are within a specific city
# function to return rows where origin and destination match the specified city name 

internal_flows <- function(name) {
  x <- flows %>% filter(city_origin == name, city_dest == name)
  return(x)
}

# use function to get flows between all MSOAs in London
flows_london <- internal_flows("London")



# IMPORTING SPATIAL DATA TO MERGE WITH DATAFRAME

#import spatial data using API: https://geoportal.statistics.gov.uk/datasets/826dc85fb600440889480f4d9dbb1a24_0
msoa_boundaries <- st_read('https://opendata.arcgis.com/datasets/826dc85fb600440889480f4d9dbb1a24_0.geojson')
# or download it locally and read it (faster)
#msoa_boundaries <- st_read('../data-raw/MSOA_2011_Boundaries/Middle_Layer_Super_Output_Areas__December_2011__Boundaries.shp')

# function to filter MSOAs that are within a certain city
city_msoas <- function(name) {
  x <- city_names %>% filter(city == name)
  return(x)
}
# get msoas in London
london_msoas <- city_msoas("London")

London <- merge(x=london_msoas[ , c("MSOA11CD", "MSOA11NM")], y=msoa_boundaries[ , c("msoa11cd", "geometry")], 
                by.x = "MSOA11CD", by.y = "msoa11cd") 

# transform back to sf and handle invalid geometries
London <- London %>% st_as_sf() %>% st_make_valid()
# plot to check
#plot(st_geometry(London))



# add geometry of origin
flows_london <- flows_london %>% left_join(msoa_boundaries[ , c("msoa11cd", "geometry")], 
                                            by = c("Area of residence" = "msoa11cd")) 
# add geometry of destination
flows_london <- flows_london %>% left_join(msoa_boundaries[ , c("msoa11cd", "geometry")], 
                                            by = c("Area of workplace" = "msoa11cd"))

flows_london <- flows_london %>% 
  mutate(dist =st_distance(geometry.x, geometry.y, by_element = T))


## testing
testt <- flows_london2[1:10,]

dist_matrix_test <- testt %>% 
  mutate(dist =st_distance(geometry.x, geometry.y, by_element = T))



# remove unnecessary data in global environment
rm(msoa_boundaries)
