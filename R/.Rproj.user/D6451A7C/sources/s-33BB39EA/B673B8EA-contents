library(dodgr)
library(sf)
library(osmdata)

# this downloads all the road data from OSM (equivalent to : key = 'highway')
streetnet <- dodgr_streetnet("london uk", expand = 0.05)
#silicate format: penalizes intersections and hilliness
#streetnet_sc <- dodgr_streetnet_sc("london uk", expand = 0.05)


# attempt at subsetting the data from bounding box --> london border (FAILS TO CONVERT TO GRAPH)
#bb <- osmdata::getbb ("london uk", format_out = "sf_polygon")
#streetnet2 <- sf::st_intersection(streetnet, bb)

graph <- weight_streetnet(streetnet, wt_profile = "bicycle")
#graph_sc <- weight_streetnet(streetnet_sc, wt_profile = "bicycle")

#save the data so that you don't have to do this again
readr::write_csv(graph, path = "../data/weighted_graph.csv")
#write_csv(graph_sc, path = "../data/weighted_graph_sc.csv")

x <- read_csv('../data/weighted_graph.csv') 

# load msoa centroid geojson
msoa_centroids_x <- st_read("../data/msoa_centroids.geojson")

# function to split c(lat, lon) to two seperate columns  FROM JM London (https://github.com/r-spatial/sf/issues/231)
# lat = Y lon = X
split_lon_lat <- function(x, names = c("lon","lat")) {
  stopifnot(inherits(x,"sf") && inherits(sf::st_geometry(x),"sfc_POINT"))
  ret <- sf::st_coordinates(x)
  ret <- tibble::as_tibble(ret)
  stopifnot(length(names) == ncol(ret))
  x <- x[ , !names(x) %in% names]
  ret <- setNames(ret,names)
  dplyr::bind_cols(x,ret)
}

# add lon and lat columns to dataframe using sfc_as_cols function
msoa_centroids <- split_lon_lat(msoa_centroids) %>% st_drop_geometry() %>% 
                  select(c(lon, lat))

# route
graph_contracted <- dodgr_contract_graph(graph)

d <- dodgr_dists (graph_contracted, from = msoa_centroids, to = msoa_centroids)

colnames(d) <- msoa_centroids_x$MSOA11CD
rownames(d) <- msoa_centroids_x$MSOA11CD
dd <- as.data.frame(d)


ddd <-cbind(msoa_centroids_x$MSOA11CD, dd)
  
dddd <- ddd %>%
  pivot_longer(-`msoa_centroids_x$MSOA11CD`, names_to = "to", values_to = "dist")

